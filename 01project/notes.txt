#travelog
.
.
#Each visited page has:
.Name
.Date
.Image

https://images.pexels.com/photos/338515/pexels-photo-338515.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500


db.inventory.find( {
    $and : [
        { $or : [ { price : 0.99 }, { price : 1.99 } ] },
        { $or : [ { sale : true }, { qty : { $lt : 20 } } ] }
    ]
} )
This query will select all documents where:

the price field value equals 0.99 or 1.99, and
the sale field value is equal to true or the qty field value is less than 20.
This query cannot be constructed using an implicit AND operation, because it uses the $or operator more than once.

//userSchema
var tuserScheme = new mongoose.Schema({
    username: String,
    password: String,
})

//placeSchema
var visitedpSchema = new mongoose.Schema({
    name: String,
    image: String,
    about: String,
    place: String,
    date: { type: Date },
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    }
})
 
 //sample
 
 [ {
    _id: 5ee9c8c54e52fd262c6bbe54,
    name: 'chennai',
    image: 'https://images.unsplash.com/photo-1487730116645-74489c95b41b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80',
    about: '',
    place: 'visited',
    date: 2021-02-21T00:00:00.000Z,
    user: 5ee49116447f5751301a0751,
    __v: 0
  }
]

 Now i want to retrive places according to userId and also collections which have 'place visited'
 How to do that.

 before i dint assosiate place with user so i used this condition

 visitedp.find({ $and: [{ place: { $ne: "visited" } }, { place: { $exists: true } }] }, function(err, vplace) {
        if (err) {
            console.log(err)
        } else {
            res.render("bucket", { vplace: vplace })
        }
    })
})

But now I associated user with place to find users places

I tried  this and im getting user now after getting this user i want to find places which mathes user and also visited
 userid = req.user._id
    visitedp.find({ "user": userid }, function(err, place) {
        if (err) { console.log(err) } else {
            console.log(place)      //userid 
            visitedp.find({ $and: [{ place: { $ne: "bucket" } }, { place: { $exists: true } }] }, function(err, vplace) {
                if (err) {
                    console.log(err)
                } else {
                    res.render("vplace", { vplace: vplace })
                }
            })
        }
    })


var query = {}
if(req.body.customerName) {
  query = {$or:[{firstName:{$regex: req.body.customerName, $options: 'i'}},{lastName:{$regex: req.body.customerName, $options: 'i'}}]}
}

var query = {$and:[{firstName:{$regex: req.body.customerName, $options: 'i'}},{lastName:{$regex: req.body.customerName, $options: 'i'}}]}
  query= { $and: [{ place: { $ne: "bucket" } }, { place: { $exists: true } }] }
  final={$and:[{user:place}},query]}

// old query

  /*visitedp.find({ $and: [{ place: { $ne: "bucket" } }, { place: { $exists: true } }] }, function(err, vplace) {
        if (err) {
            console.log(err)
        } else {
            res.render("vplace", { vplace: vplace })
        }
    })*/

    /*visitedp.find({ $and: [{ place: { $ne: "visited" } }, { place: { $exists: true } }] }, function(err, vplace) {
        if (err) {
            console.log(err)
        } else {
            res.render("bucket", { vplace: vplace })
        }
    })*/

/*
    app.get("/", function(req, res) {
    res.render("Login")
})

app.get("/visited", isLoggedIn, function(req, res) {
    userid = req.user._id
    query = { $and: [{ place: { $ne: "bucket" } }, { place: { $exists: true } }] }
    final = { $and: [{ "user": userid }, query] }
    visitedp.find({ "user": userid }, function(err, place) {
        if (err) { console.log(err) } else {
            visitedp.find(final, function(err, vplace) {
                if (err) {
                    console.log(err)
                } else {
                    res.render("vplace", { vplace: vplace })
                }
            })
        }
    })

})

app.post("/visited", isLoggedIn, function(req, res) {
    var name = req.body.name
    var image = req.body.image
    var about = req.body.about
    var place = req.body.place
    var date = req.body.date
    var user = req.user._id
    var newPlace = { name: name, image: image, about: about, place: place, date: date, user: user }
    visitedp.create(newPlace, function(err, visited) {
        if (err) {
            console.log(err)
        } else {
            res.redirect("/visited")
        }
    })
})
app.get("/bucket", isLoggedIn, function(req, res) {
    userid = req.user._id
    query = { $and: [{ place: { $ne: "visited" } }, { place: { $exists: true } }] }
    final = { $and: [{ "user": userid }, query] }
    visitedp.find({ "user": userid }, function(err, place) {
        if (err) { console.log(err) } else {
            visitedp.find(final, function(err, vplace) {
                if (err) {
                    console.log(err)
                } else {
                    res.render("bucket", { vplace: vplace })
                }
            })
        }
    })
})

app.get("/visited/new", isLoggedIn, function(req, res) {
    res.render("new.ejs")
})

app.get("/visited/:id/edit", function(req, res) {
    visitedp.findById(req.params.id, function(err, found) {
        if (err) {
            res.redirect("/visited")
        } else {
            res.render("edit", { found: found })
                //res.send("hi")
        }
    })

})
app.put("/visited/:id", function(req, res) {
    visitedp.findByIdAndUpdate(req.params.id, req.body.place, function(err, updated) {
        if (err) {
            res.redirect("/visited")
        } else {
            res.redirect("/visited")
        }
    })
})

app.delete("/visited/:id", function(req, res) {
    visitedp.findByIdAndRemove(req.params.id, function(err) {
        if (err) {
            res.redirect("/visited")
        } else {
            res.redirect("/visited")
        }
    })
})
*/


/*
app.get("/register", function(req, res) {
    res.render("Login")
})

app.post("/register", function(req, res) {
    var newtuser = new User({ username: req.body.username })
    User.register(newtuser, req.body.password, function(err, user) {
        if (err) {
            console.log(err)
            return res.render("Login")
        }
        passport.authenticate("local")(req, res, function() {
            res.redirect("/visited")
        })
    })
})

app.get("/login", function(reqq, res) {
    res.render("Login")
})

app.post("/login", passport.authenticate("local", { successRedirect: "/visited", failureRedirect: "/" }),
    function(reqq, res) {
        res.render("Login")
    })

app.get("/logout", function(req, res) {
    req.logout();
    res.redirect("/")
})

function isLoggedIn(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    res.redirect("/")
}

*/

*/